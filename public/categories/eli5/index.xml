<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eli5 on Daniel Michaels | Developer | Technical Lead</title>
    <link>https://danielms.site/categories/eli5/</link>
    <description>Recent content in Eli5 on Daniel Michaels | Developer | Technical Lead</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 15 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://danielms.site/categories/eli5/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LessPass: A Primer</title>
      <link>https://danielms.site/blog/lesspass-eli5/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://danielms.site/blog/lesspass-eli5/</guid>
      <description>LessPass The managerless password manager LessPass, unlike other password managers does not store any information in a database or local cache. It simply takes in three pieces of information and then hashes that to return a password. If all three pieces of information haven&amp;rsquo;t changed LessPass will always return the same password.
Why use it over other choices Straight from the creator himself:
 How do I synchronize this file on all my devices?</description>
    </item>
    
    <item>
      <title>Sqlite3: A Primer</title>
      <link>https://danielms.site/blog/sqlite3-primer/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://danielms.site/blog/sqlite3-primer/</guid>
      <description>SQL Reference SQLite3 Specific Transactions SQLite transactions are ACID (Atomic, Consistent, Isolated and Durable). This means that data is not lost in the event of crashes, power failures or operating system dumps.
Atomic - Meaning changes cannot be broken down into smaller parts; either the entire transaction is commit or nothing at all.
Consistent - A transaction must ensure to change the database from one valid state to another. If a transaction results in invalid data, the database will revert its previous state.</description>
    </item>
    
    <item>
      <title>Public Key Crypto: The Basics</title>
      <link>https://danielms.site/blog/public-key-crypto-the-basics/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://danielms.site/blog/public-key-crypto-the-basics/</guid>
      <description>Public Key Cryptography My simplest explanation TL;DR: Public key cryptography is a method of using a different key for the encryption and decryption of a file, message or other medium.
Public Key Cryptography What problem does it solve?
If two parties wish to exchange information to one another but the medium which they use to communicate is compromised, how do they share a secret key to unlock their encrypted messages?</description>
    </item>
    
    <item>
      <title>Base64 ELI5</title>
      <link>https://danielms.site/blog/base64-eli5/</link>
      <pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://danielms.site/blog/base64-eli5/</guid>
      <description>Base64 I thought I understood Base64. I mean its the alphabet in upper and lowercase plus numbers and a couple characters. But, what I didn\&amp;rsquo;t know was how the 64 bits worked, like thats missing a whole extra two bits. Why?
TL;DR Base64 is a binary to ASCII encoding that takes a byte (8 bits) and chunks its down into segments of 6 bits - six ones in binary equates to 64 which is where it derives its name.</description>
    </item>
    
  </channel>
</rss>