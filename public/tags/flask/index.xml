<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flask on Daniel Michaels</title>
    <link>https://danielms.site/tags/flask/</link>
    <description>Recent content in flask on Daniel Michaels</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 14 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://danielms.site/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flask Series: Jsonify</title>
      <link>https://danielms.site/blog/flask-jsonify-you-dont-need-it/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://danielms.site/blog/flask-jsonify-you-dont-need-it/</guid>
      <description>Flask jsonify, do I still need it? For a long time, returning JSON in flask required using the flask.jsonify API. However, since this PR Flask will by default call jsonify under the hood on any dictionary it receives on a make_response call.
How does it work When you need to return json in a response, you can simply use a plain python dictionary instead of the jsonify API.
# plain dictionary @app.</description>
    </item>
    
    <item>
      <title>Flask, forms and http requests</title>
      <link>https://danielms.site/blog/flask-forms-and-http-requests/</link>
      <pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://danielms.site/blog/flask-forms-and-http-requests/</guid>
      <description>Flask, Forms and HTTP Requests Preface This week I have been building a small webapp that leverage&amp;rsquo;s an external API to populate values in the user pages. And it pains me to say that I spent a silly length of time debugging what was a rather easy problem.
The webapp uses Flask, jinja2 templates and the fuelwatcher API. The issue started when trying to institute a search bar that allows the user to select a series of parameters.</description>
    </item>
    
  </channel>
</rss>
